imports:

- classpath:/common/directors.yaml
- classpath:/common/groovy/actors.yaml
- classpath:/common/python/actors.yaml

components:

- id: ESGFWorkflow
  type: Workflow
  properties:
    director: !ref MTDataDrivenDirector
    nodes:
    - !ref ServiceURL
    - !ref DownloadEsgfFile
    - !ref RunCDOInfo
    - !ref RenderResult

- id: ServiceURL
  type: Node
  properties:  
    actor: !ref ConstantSource
    constants:
      value: http://localhost:8090/wps
    outflows:
      value: /wps/serviceURL/

- id: DownloadEsgfFile
  type: Node
  properties:
    actor: !ref ExecuteEsgfWPS
    constants:
      identifier: de.dkrz.esgf.wget
      openid: https://esgf-data.dkrz.de/esgf-idp/openid/pingutest
      password: Pingutest1
      netcdf_url: http://bmbf-ipcc-ar5.dkrz.de/thredds/fileServer/cmip5/output1/MPI-M/MPI-ESM-LR/1pctCO2/yr/ocnBgchem/Oyr/r1i1p1/v20120314/o2/o2_Oyr_MPI-ESM-LR_1pctCO2_r1i1p1_1850-1899.nc
    inflows:
      serviceURL: /wps/serviceURL/
    outflows:
      status: /wps/esgf/status/
      outputURL: /wps/esgf/outputURL/

- id: ExecuteEsgfWPS
  type: PythonActor
  properties:
    step: |
      import sys
      sys.path.append("/home/pingu/sandbox/climdaps/src/OWSLib")
      from owslib.wps import WebProcessingService, monitorExecution
      wps = WebProcessingService(serviceURL, verbose=False)
      inputs = [("openid", openid), ("password", password), ("netcdf_url", netcdf_url)]
      outputs = [("output",True)]
      execution = wps.execute(identifier, inputs=inputs, output=outputs)
      # TODO: fix delay of copying output file ...
      monitorExecution(execution, sleepSecs=30)
      status = execution.status
      output = execution.processOutputs[0]
      outputURL = output.reference
    inputs:
      identifier: 
      serviceURL:
      openid:
      password:
      netcdf_url:
    outputs:
      status:
      outputURL:  

- id: RunCDOInfo
  type: Node
  properties:
    actor: !ref ExecuteCDOWPS
    constants:
      identifier: de.dkrz.cdo.sinfo_workflow
    inflows:
      serviceURL: /wps/serviceURL/
      input: /wps/esgf/outputURL/
    outflows:
      status: /wps/cdo/status/
      outputURL: /wps/cdo/outputURL/  
 
- id: ExecuteCDOWPS
  type: PythonActor
  properties:
    step: |
      import sys
      sys.path.append("/home/pingu/sandbox/climdaps/src/OWSLib")
      from owslib.wps import WebProcessingService, monitorExecution
      wps = WebProcessingService(serviceURL, verbose=True)
      inputs = [("input", input)]
      outputs = [("output",True)]
      execution = wps.execute(identifier, inputs=inputs, output=outputs)
      monitorExecution(execution)
      status = execution.status
      output = execution.processOutputs[0]
      outputURL = output.reference
    inputs:
      identifier: 
      serviceURL:
      input:
    outputs:
      status: 
      outputURL:

- id: RenderResult
  type: Node
  properties:
    actor: !ref PrintStreamWriter
    inflows:
      message: /wps/cdo/status/